#metadata
swagger: "2.0"
info:
  title: PovoLesi API
  description: API richieste dal corso di ingegneria del software II
  version: 1.0.0

#We only exchange JSONs
consumes:
  - application/json
produces:
  - application/json
  
#TODO: The host should be adjusted later
host: api.nowhere.com
basePath: /v1
schemes:
  - https

#All the request will require
securityDefinitions:
  ApiTokenAuth:
    type: apiKey
    in: header
    name: X-API-TOKEN
    description: >
      In order to use the APIs, you must first get an authentication token (we call 
      it just "token"). The token is specific to a user. It can be optained by 
      calling the `/users/register` API and it has to be sent as a `X-API-TOKEN`
      header with any other API request.

#All the APIs, except for register, are required to have an api token as a header
#of their requests
security:
  - ApiTokenAuth: []

definitions:
  User:
    title: User
    type: object
    properties:
      id:
        type: integer
        description: The id that univocally identifies the user
        example: 42
      name:
        type: string
        description: The full name of the user
        example: Gianni Morandi
      badgeNumber:
        type: string
        description: The university identifier of this user. It can be the student's "numero di matricola" or the teacher's badge number
        example: 18123
      email:
        type: string
        description: The user's email
        example: mail@example.com
        
      manageGroups:
        type: boolean
        description: Can this user create/edit/delete user groups?

      canManageTasks:
        type: boolean
        description: Can this user create/edit/delete taks?

      canChangePermissions:
        type: boolean
        description: Can this user change other user's permissions?

      canListUsers:
        type: boolean
        description: Can this user access the list of all the users?

    required:
      - id
      - name
      - badgeNumber
      - email
      - canManageTasks
      - canChangePermissions
      - canListUsers

  Group:
    title: Group
    type: object
    properties:
      id:
        type: integer
        description: A unique identifier of the group

      name:
        type: string
        description: The name associated to this group

      createdBy:
        $ref: "#/definitions/User"

      users:
        description: All the users that are part of this groups
        type: array
        items:
          $ref: '#/definitions/User'

    required:
      - properties
      - name
      - createdBy
      - users


  Error:
    type: object
    properties:
      code:
        type: string
        description: A string that describes the error
      errorMessage:
        type: string
        description: A developer-friendly description of what wen wrong
    required:
      - code
      - errorMessage

responses:
  Unauthorized:
    description: The caller doesn't have the needed authorization
    schema:
      $ref: "#/definitions/Error"

parameters:
  offsetParam:
    in: query
    name: offset
    required: false
    type: integer
    minimum: 0
    description: The number of items to skip before starting to collect the result set.

  limitParam:
    in: query
    name: limit
    required: false
    type: integer
    minimum: 1
    maximum: 100
    default: 20
    description: The numbers of items to return.

paths:

###########################
# UNAUTHENTICATED
###########################

  /register:
    post:
      summary: Allows a user to register in order to receive the authentication token
      security: [] #this api can be called without the token
      tags:
        - Unauthenticated
      parameters:
        - in: body
          name: data
          description: The registration data of the user
          schema:
            type: object
            properties:
              name:
                type: string
                description: The complete name of the person in "first-name second-name" format
              email:
                type: string
              badgeNumber:
                type: string
              password:
                type: string

      responses:
        201:
          description: The user has been inserted and the associated token is generated
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 42
              token:
                type: string
                example: AABBCCDDEEFFGG
        400:
          description: Could not insert the user. Probably the email is already in use
          schema:
            $ref: '#/definitions/Error'

  /login/:
    post:
      summary: Generates a new token for an already registered user
      security: []
      tags:
        - Unauthenticated
      description: >
        Logs the user in. This request is usually used to get a new authentication token associated to the user. After this call the old token (got by `register` or `login` call) is then released and is not valid anymore.

      responses:
        201:
          description: The new token has been generated
          schema:
            type: object
            properties:
              token:
                type: string

        400:
          description: Invalid credentials
          schema:
            $ref: '#/definitions/Error'


###########################
# USERS
###########################

  /users/me:
    get:
      summary: Returns information about the authenticated user
      description: Retrieves the user that is authenticated by the token and
        returns it's basic data
      tags: [Current user]

      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'

    put:
      summary: Updates the information about the authenticated user
      tags: [Current user]
      parameters:
        - in: body
          name: data
          schema:
            type: object
            properties:
              name:
                description: new name to assign to the user
                type: string

              badgeNumber:
                type: string

      responses:
        200:
          description: OK


  /users/me/change-email:
    post:
      summary: Changes the email of the authenticated user
      tags: [Current user]
      parameters:
        - in: body
          required: true
          name: data
          schema:
            type: object
            properties:
              newEmail:
                type: string

      responses:
        200:
          description: OK

        400:
          description: Could not change email. Usually because the email is already used by another user.
          schema:
            $ref: '#/definitions/Error'


  /users/me/change-password:
    post:
      summary: Changes the password of the authenticated user
      tags: [Current user]
      parameters:
        - in: body
          required: true
          name: data
          schema:
            type: object
            properties:
              newPassword:
                type: string

      responses:
        200:
          description: OK

        400:
          description: Could not change password because the password is invalid (empty, etc...)
          schema:
            $ref: '#/definitions/Error'



  /users/:
    get:
      summary: Returns all the users of the system
      description: >
        Retrieves all the users of the system.


        NOTE: The caller must have the `listUsers` permission set, otherwise
        a `401` error will be issued

      tags: [Users]

      parameters:
        - in: query
          name: sortBy
          type: string
          enum: [id, name, badgeNumber, email]

        - $ref: '#/parameters/offsetParam'
        - $ref: '#/parameters/limitParam'

      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'

        401:
          $ref: "#/responses/Unauthorized"


  /users/{userId}:
    get:
      summary: Returns a specific user given it's ID
      tags: [Users]
      parameters:
        - in: path
          name: userId
          required: true
          type: integer
          description: The id of the user

      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'

        404:
          description: No users were found with the specified id
          schema:
            $ref: '#/definitions/Error'

  /users/{userId}/set-permission:
    put:
      summary: Grants or revokes a specific permission
      tags: [Users]
      description: >
        Gives or revokes a specific permission from the user.


        NOTE: The caller must have the `changePermissions` permission set

      parameters:
        - in: path
          name: userId
          required: true
          type: integer
          description: The id of the user

        - in: body
          name: permissionData
          required: true
          schema:
            type: object
            required:
              - permissionType
              - value
            properties:
              permissionType:
                type: string
                description: The type of the permission to give to user
                enum:
                  [manageGroups, manageTasks, changePermissions, listUsers]

              value:
                type: boolean
                description: >
                  `true` to give permission, `false` to revoke it

      responses:
        200:
          description: OK

        400:
          description: Could not change permissions. Happens when trying to change the permission of the admin
          schema:
            $ref: '#/definitions/Error'

        401:
          $ref: "#/responses/Unauthorized"

        404:
          description: No users were found with the specified id
          schema:
            $ref: '#/definitions/Error'



###########################
# GROUPS
###########################

  /groups/:
    get:
      summary: Returns a list of all the groups (classes)
      description: >
        Returns a list of all the groups of users


        NOTE: The caller must have the `manageGroups` permission set, otherwise a 401 error will be issued

      tags: [Groups]
      parameters:
        - in: query
          name: sortBy
          type: string
          enum: [id, name]

        - $ref: '#/parameters/offsetParam'
        - $ref: '#/parameters/limitParam'
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'

        401:
          $ref: "#/responses/Unauthorized"


  /groups/{groupId}:
    get:
      summary: Retrieves a group having a given id

      description: >
        Retrieves a group having a given id


        NOTE: The caller must have the `manageGroups` permission set, otherwise a 401 error will be issued
      tags: [Groups]
      parameters:
        - in: path
          name: groupId
          type: integer
          required: true

      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Group'

        401:
          $ref: "#/responses/Unauthorized"

  /groups/{groupId}/add-user:
    post:
      summary: Adds a new user to the group

      description: >
        Adds a new user to the group


        NOTE: The caller must have the `manageGroups` permission set, otherwise a 401 error will be issued
      tags: [Groups]
      parameters:
        - in: path
          name: groupId
          type: integer
          required: true

        - in: body
          name: data
          required: true
          schema:
            type: object
            properties:
              userId:
                type: integer


      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Group'

        400:
          description: Could not add a user to the group, probably becaus the user is already part of the group

          schema:
            $ref: '#/definitions/Error'


        401:
          $ref: "#/responses/Unauthorized"


  /groups/{groupId}/remove-user:
    post:
      summary: removes a user from the group

      description: >
        Removes a user from the group


        NOTE: The caller must have the `manageGroups` permission set, otherwise a 401 error will be issued
      tags: [Groups]
      parameters:
        - in: path
          name: groupId
          type: integer
          required: true

        - in: body
          name: data
          required: true
          schema:
            type: object
            properties:
              userId:
                type: integer


      responses:
        200:
          description: The use was successfully removed from the group
          schema:
            $ref: '#/definitions/Group'

        400:
          description: Could not remove the user to the group, probably becaus the user is not part of the group

          schema:
            $ref: '#/definitions/Error'

        401:
          $ref: "#/responses/Unauthorized"


  /groups/{groupId}/delete:
    post:
      summary: deletes the group

      description: >
        Removes a user from the group


        NOTE: The caller must have the `manageGroups` permission set, otherwise a 401 error will be issued
      tags: [Groups]
      parameters:
        - in: path
          name: groupId
          type: integer
          required: true

      responses:
        200:
          description: The group was successfully deleted

        404:
          description: The group to delete was not found

        401:
          $ref: "#/responses/Unauthorized"


  /groups/create:
    post:
      summary: Creates a new group
      tags: [Groups]
      responses:
        201:
          description: The group was successfully created. The id of the generated group is then returned.
          schema:
            type: object
            properties:
              groupId:
                type: integer
                example: 12

        400:
          description: Something went wrong when trying to create a new group. Maybe the name of the groups is not valid or already taken.
          schema:
            $ref: '#/definitions/Error'

        401:
          $ref: "#/responses/Unauthorized"



